require("dotenv").config();
const express = require("express");
const axios = require("axios");
const fs = require("fs");
const path = require("path");
const FormData = require("form-data");

const app = express();
const PORT = process.env.PORT || 3000;

const SUCCESSFUL_RESULT_NAMES = process.env.SUCCESSFUL_RESULT_NAMES
  ? process.env.SUCCESSFUL_RESULT_NAMES.split(",")
  : ["–£—Å–ø–µ—Ö", "–ì–æ—Ä—è—á–∏–π", "–ì–æ—Ä—è—á–∞—è", "Hot"];

const TG_BOT_TOKEN = process.env.TG_BOT_TOKEN;
const TG_CHAT_ID = process.env.TG_CHAT_ID;

app.use(express.json());

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
const tempDir = path.join(__dirname, 'temp');
if (!fs.existsSync(tempDir)) {
  fs.mkdirSync(tempDir);
}

app.get("/", (req, res) => {
  res.send("CallSuccess AI Processor is alive!");
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è access_token
async function getAccessToken() {
  try {
    console.log("–ü–æ–ª—É—á–∞—é access_token...");
    
    const response = await axios({
      method: 'post',
      url: 'https://api.skorozvon.ru/oauth/token',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded'
      },
      data: new URLSearchParams({
        grant_type: 'password',
        username: process.env.SKOROZVON_USERNAME,
        api_key: process.env.SKOROZVON_API_KEY,
        client_id: process.env.SKOROZVON_CLIENT_ID,
        client_secret: process.env.SKOROZVON_CLIENT_SECRET
      })
    });

    console.log("Access token –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ");
    return response.data.access_token;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:", error.response?.data || error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
async function downloadRecording(callId) {
  try {
    const accessToken = await getAccessToken();
    if (!accessToken) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å access token');
      return null;
    }

    const recordingUrl = `https://api.skorozvon.ru/api/v2/calls/${callId}.mp3?access_token=${accessToken}`;
    console.log("–°–∫–∞—á–∏–≤–∞—é –∑–∞–ø–∏—Å—å –ø–æ URL:", recordingUrl);
    
    const response = await axios({
      method: 'GET',
      url: recordingUrl,
      responseType: 'stream',
      timeout: 30000
    });

    const filePath = path.join(tempDir, `${callId}.mp3`);
    const writer = fs.createWriteStream(filePath);
    
    response.data.pipe(writer);
    
    return new Promise((resolve, reject) => {
      writer.on('finish', () => {
        console.log("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–∞:", filePath);
        resolve(filePath);
      });
      writer.on('error', reject);
    });
    
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:", error.message);
    if (error.response) {
      console.error("–°—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏:", error.response.status);
    }
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–∞—Ç–∞ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏)
function formatDate(dateString) {
  if (!dateString) return "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞";
  
  try {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    });
  } catch (error) {
    return "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞";
  }
}

app.post("/webhook", async (req, res) => {
  console.log("=== –í–ï–ë–•–£–ö –ü–û–õ–£–ß–ï–ù ===");
  console.log("–í—Ä–µ–º—è:", new Date().toISOString());

  try {
    const resultName = req.body?.call_result?.result_name;
    const callDuration = req.body?.call?.duration || 0;
    const callId = req.body?.call?.id;
    const callStartedAt = req.body?.call?.started_at;

    console.log("--- –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ ---");
    console.log("–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:", resultName);
    console.log("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–≤–æ–Ω–∫–∞:", callDuration, "—Å–µ–∫");
    console.log("ID –∑–≤–æ–Ω–∫–∞:", callId);
    console.log("–î–∞—Ç–∞ –∑–≤–æ–Ω–∫–∞:", callStartedAt);

    const isSuccessfulCall =
      resultName &&
      SUCCESSFUL_RESULT_NAMES.some((name) =>
        resultName.toLowerCase().includes(name.toLowerCase())
      );

    if (isSuccessfulCall && callId) {
      console.log("–û–ë–ù–ê–†–£–ñ–ï–ù –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ô –ö–õ–ò–ï–ù–¢!");

      const managerName = req.body?.call?.user?.name || "–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω";
      const phone = req.body?.call?.phone || "–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω";
      const comment = req.body?.call_result?.comment || "–Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è";
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É (—Ç–æ–ª—å–∫–æ –¥–∞—Ç–∞ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏)
      const formattedDate = formatDate(callStartedAt);

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –∫ –∞—É–¥–∏–æ
      const message = `üéß [–ê—É–¥–∏–æ–∑–∞–ø–∏—Å—å]
‚úÖ –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ô –ö–õ–ò–ï–ù–¢ 

üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä: ${managerName}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${resultName}
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}

–î–∞—Ç–∞: ${formattedDate}
ID –∑–≤–æ–Ω–∫–∞: ${callId}`;

      // –ñ–¥–µ–º 2 –º–∏–Ω—É—Ç—ã –¥–ª—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
      console.log("–ñ–¥—É 2 –º–∏–Ω—É—Ç—ã, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å—å —É—Å–ø–µ–ª–∞ –ø–æ—è–≤–∏—Ç—å—Å—è...");
      await new Promise((resolve) => setTimeout(resolve, 120000));

      // –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ –° –¢–ï–ö–°–¢–û–ú –í –ü–û–î–ü–ò–°–ò
      const audioFilePath = await downloadRecording(callId);
      
      if (audioFilePath) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –û–î–ù–û —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞—É–¥–∏–æ –∏ —Ç–µ–∫—Å—Ç–æ–º
        const formData = new FormData();
        formData.append('chat_id', TG_CHAT_ID);
        formData.append('audio', fs.createReadStream(audioFilePath));
        formData.append('caption', message); // –¢–µ–∫—Å—Ç –∏–¥–µ—Ç –∫–∞–∫ –ø–æ–¥–ø–∏—Å—å –∫ –∞—É–¥–∏–æ
        formData.append('parse_mode', 'HTML');

        await axios.post(
          `https://api.telegram.org/bot${TG_BOT_TOKEN}/sendAudio`,
          formData,
          {
            headers: formData.getHeaders(),
            maxContentLength: Infinity,
            maxBodyLength: Infinity
          }
        );

        console.log("–ê—É–¥–∏–æ —Å —Ç–µ–∫—Å—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏");
        
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try {
          fs.unlinkSync(audioFilePath);
          console.log("–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω");
        } catch (err) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:", err.message);
        }
      } else {
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç");
        await axios.post(`https://api.telegram.org/bot${TG_BOT_TOKEN}/sendMessage`, {
          chat_id: TG_CHAT_ID,
          text: message + "\n\n‚ùå –ó–∞–ø–∏—Å—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
          parse_mode: "HTML"
        });
      }

    } else {
      console.log("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º - –Ω–µ —É—Å–ø–µ—à–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –∑–≤–æ–Ω–∫–∞");
    }

    res.sendStatus(200);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞:", error.message);
    if (error.response) {
      console.error("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:", error.response.data);
    }
    res.sendStatus(200);
  }
});

app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`–í–µ–±—Ö—É–∫ –¥–ª—è Skorozvon: http://localhost:${PORT}/webhook`);
  console.log(`–û–∂–∏–¥–∞—é –∑–≤–æ–Ω–∫–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏: ${SUCCESSFUL_RESULT_NAMES.join(", ")}`);
});