require("dotenv").config();
const express = require("express");
const axios = require("axios");
const FormData = require("form-data");
const { Telegraf, Markup } = require("telegraf");
const db = require('./database.js');

const app = express();
const PORT = process.env.PORT || 3000;

const SUCCESSFUL_RESULT_NAMES = process.env.SUCCESSFUL_RESULT_NAMES
  ? process.env.SUCCESSFUL_RESULT_NAMES.split(",")
  : ["–ì–æ—Ä—è—á–∏–π", "–ì–æ—Ä—è—á–∞—è", "Hot", "–£—Å–ø–µ—Ö"];

const TG_BOT_TOKEN = process.env.TG_BOT_TOKEN;
const MAIN_ADMIN_ID = process.env.MAIN_ADMIN_ID;

app.use(express.json());

const processedCallIds = new Set();
let availableScenarios = [];
let availableChats = [];

// Database functions
function getChatIdForScenario(scenarioId) {
  return new Promise((resolve, reject) => {
    db.get(
      `SELECT telegram_chat_id FROM scenario_mappings WHERE skorozvon_scenario_id = ?`,
      [scenarioId],
      (err, row) => {
        if (err) reject(err);
        resolve(row ? row.telegram_chat_id : null);
      }
    );
  });
}

function isUserAdmin(telegramUserId) {
  return new Promise((resolve, reject) => {
    db.get(
      `SELECT 1 FROM admin_users WHERE telegram_user_id = ?`,
      [telegramUserId],
      (err, row) => {
        if (err) reject(err);
        resolve(!!row);
      }
    );
  });
}

function addAdmin(userId, username) {
  return new Promise((resolve, reject) => {
    db.run(
      `INSERT OR IGNORE INTO admin_users (telegram_user_id, username) VALUES (?, ?)`,
      [userId, username],
      function(err) {
        if (err) reject(err);
        resolve({ id: this.lastID, changes: this.changes });
      }
    );
  });
}

function removeAdmin(userId) {
  return new Promise((resolve, reject) => {
    db.run(
      `DELETE FROM admin_users WHERE telegram_user_id = ?`,
      [userId],
      function(err) {
        if (err) reject(err);
        resolve({ changes: this.changes });
      }
    );
  });
}

function listAdmins() {
  return new Promise((resolve, reject) => {
    db.all(`SELECT * FROM admin_users`, [], (err, rows) => {
      if (err) reject(err);
      resolve(rows);
    });
  });
}

function addScenarioMapping(scenarioId, scenarioName, chatId, chatTitle) {
  return new Promise((resolve, reject) => {
    db.run(
      `INSERT OR REPLACE INTO scenario_mappings (skorozvon_scenario_id, skorozvon_scenario_name, telegram_chat_id, telegram_chat_title) VALUES (?, ?, ?, ?)`,
      [scenarioId, scenarioName, chatId, chatTitle],
      function(err) {
        if (err) reject(err);
        resolve({ id: this.lastID, changes: this.changes });
      }
    );
  });
}

function removeScenarioMapping(scenarioId) {
  return new Promise((resolve, reject) => {
    db.run(
      `DELETE FROM scenario_mappings WHERE skorozvon_scenario_id = ?`,
      [scenarioId],
      function(err) {
        if (err) reject(err);
        resolve({ changes: this.changes });
      }
    );
  });
}

function listScenarioMappings() {
  return new Promise((resolve, reject) => {
    db.all(`SELECT * FROM scenario_mappings`, [], (err, rows) => {
      if (err) reject(err);
      resolve(rows);
    });
  });
}

function logCall(callData, targetChatId) {
  db.run(
    `INSERT OR IGNORE INTO call_logs (call_id, scenario_id, result_name, manager_name, phone, comment, started_at, telegram_chat_id_sent) VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,
    [
      callData.callId,
      callData.scenarioId,
      callData.resultName,
      callData.managerName,
      callData.phone,
      callData.comment,
      callData.startedAt,
      targetChatId
    ],
    (err) => { if (err) console.error('Error logging call:', err); }
  );
}

// Skorozvon API functions
async function getAccessToken() {
  try {
    const response = await axios({
      method: "post",
      url: "https://api.skorozvon.ru/oauth/token",
      headers: { "Content-Type": "application/x-www-form-urlencoded" },
      data: new URLSearchParams({
        grant_type: "password",
        username: process.env.SKOROZVON_USERNAME,
        api_key: process.env.SKOROZVON_API_KEY,
        client_id: process.env.SKOROZVON_CLIENT_ID,
        client_secret: process.env.SKOROZVON_CLIENT_SECRET,
      }),
    });
    return response.data.access_token;
  } catch (error) {
    console.error("Token error:", error.response?.data || error.message);
    return null;
  }
}

async function fetchScenariosFromSkorozvon() {
  try {
    const accessToken = await getAccessToken();
    if (!accessToken) {
      console.error("Cannot get access token to fetch scenarios");
      return [];
    }

    const response = await axios.get('https://api.skorozvon.ru/api/v2/scenarios', {
      headers: {
        'Authorization': `Bearer ${accessToken}`
      }
    });

    if (response.data && response.data.data) {
      return response.data.data.map(scenario => ({
        id: scenario.id,
        name: scenario.name,
        system: scenario.system
      }));
    }
    return [];
  } catch (error) {
    console.error("Error fetching scenarios:", error.response?.data || error.message);
    return [];
  }
}

async function refreshScenariosCache() {
  availableScenarios = await fetchScenariosFromSkorozvon();
  console.log(`Refreshed scenarios cache. Found ${availableScenarios.length} scenarios.`);
}

// Telegram functions
async function checkBotAdminRights(chatId) {
  try {
    const response = await axios.get(`https://api.telegram.org/bot${TG_BOT_TOKEN}/getChatMember`, {
      params: {
        chat_id: chatId,
        user_id: (await bot.telegram.getMe()).id
      }
    });
    
    const status = response.data.result.status;
    return status === 'administrator' || status === 'creator';
  } catch (error) {
    console.error(`Error checking admin rights for chat ${chatId}:`, error.message);
    return false;
  }
}

async function updateAvailableChats(ctx) {
  try {
    if (ctx.chat && (ctx.chat.type === 'group' || ctx.chat.type === 'supergroup')) {
      const chatId = ctx.chat.id;
      
      const isAdmin = await checkBotAdminRights(chatId);
      
      if (isAdmin) {
        const chatTitle = ctx.chat.title || `–ß–∞—Ç ${chatId}`;
        
        const existingChatIndex = availableChats.findIndex(chat => chat.id === chatId);
        
        if (existingChatIndex === -1) {
          availableChats.push({
            id: chatId,
            title: chatTitle,
            type: ctx.chat.type,
            updatedAt: new Date()
          });
          console.log(`Added admin chat: ${chatTitle} (${chatId})`);
        } else {
          if (availableChats[existingChatIndex].title !== chatTitle) {
            availableChats[existingChatIndex].title = chatTitle;
            availableChats[existingChatIndex].updatedAt = new Date();
            console.log(`Updated chat title: ${chatTitle} (${chatId})`);
          }
        }
      } else {
        const index = availableChats.findIndex(chat => chat.id === chatId);
        if (index !== -1) {
          console.log(`Removing chat ${chatId} - bot is no longer admin`);
          availableChats.splice(index, 1);
        }
      }
    }
  } catch (error) {
    console.error("Error updating chats:", error.message);
  }
}

async function sendAudioToTelegram(callId, caption, targetChatId) {
  try {
    const accessToken = await getAccessToken();
    if (!accessToken) return false;

    const recordingUrl = `https://api.skorozvon.ru/api/v2/calls/${callId}.mp3?access_token=${accessToken}`;

    const audioResponse = await axios({
      method: "GET",
      url: recordingUrl,
      responseType: "stream",
      timeout: 30000,
    });

    const formData = new FormData();
    formData.append("chat_id", targetChatId);
    formData.append("audio", audioResponse.data);
    formData.append("caption", caption);
    formData.append("parse_mode", "HTML");

    await axios.post(
      `https://api.telegram.org/bot${TG_BOT_TOKEN}/sendAudio`,
      formData,
      {
        headers: formData.getHeaders(),
        maxContentLength: Infinity,
        maxBodyLength: Infinity,
      }
    );

    return true;
  } catch (error) {
    console.error("Audio send error for chat", targetChatId, error.message);
    return false;
  }
}

function formatDate(dateString) {
  if (!dateString) return new Date().toLocaleDateString("ru-RU");
  try {
    const date = new Date(dateString);
    return date.toLocaleDateString("ru-RU", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
    });
  } catch (error) {
    return new Date().toLocaleDateString("ru-RU");
  }
}

// Bot initialization
const bot = new Telegraf(TG_BOT_TOKEN);

bot.use(async (ctx, next) => {
  await updateAvailableChats(ctx);
  await next();
});

// Command handlers
bot.start(async (ctx) => {
  const userId = ctx.from.id;
  const username = ctx.from.username;
  
  if (userId.toString() === MAIN_ADMIN_ID) {
    await addAdmin(userId, username);
    ctx.reply(
      'ü§ñ –ë–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –∏–∑ Skorozvon.\n\n' +
      '–ö–æ–º–∞–Ω–¥—ã:\n' +
      '/setup - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫—É —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤\n' +
      '/list - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏\n' +
      '/refresh - –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤\n' +
      '/admins - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏\n' +
      '/chats - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã\n' +
      '/clean_chats - –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤\n\n' +
      '–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!'
    );
  } else {
    ctx.reply(
      'ü§ñ –ë–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –∏–∑ Skorozvon.\n\n' +
      '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞.'
    );
  }
});

bot.command('clean_chats', async (ctx) => {
  if (!(await isUserAdmin(ctx.from.id))) {
    return ctx.reply('‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.');
  }

  const oldCount = availableChats.length;
  availableChats = [];
  
  ctx.reply(`‚ôªÔ∏è –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –æ—á–∏—â–µ–Ω. –ë—ã–ª–æ: ${oldCount} —á–∞—Ç–æ–≤.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–∞—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.`);
});

bot.command('setup', async (ctx) => {
  if (!(await isUserAdmin(ctx.from.id))) {
    return ctx.reply('‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.');
  }

  if (availableScenarios.length === 0) {
    await refreshScenariosCache();
  }

  if (availableScenarios.length === 0) {
    return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–∏.');
  }

  if (availableChats.length === 0) {
    return ctx.reply('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤.');
  }

  ctx.reply(
    '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:',
    Markup.inlineKeyboard(
      availableScenarios.map(scenario => [
        Markup.button.callback(
          `${scenario.name}`,
          `select_scenario_${scenario.id}`
        )
      ]),
      { columns: 1 }
    )
  );
});

bot.action(/select_scenario_(\d+)/, async (ctx) => {
  const scenarioId = ctx.match[1];
  const scenario = availableScenarios.find(s => s.id == scenarioId);
  
  ctx.reply(
    `–í—ã–±—Ä–∞–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π: ${scenario.name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:`,
    Markup.inlineKeyboard(
      availableChats.map(chat => [
        Markup.button.callback(
          `${chat.title}`,
          `select_chat_${scenarioId}_${chat.id}`
        )
      ]),
      { columns: 1 }
    )
  );
});

bot.action(/select_chat_(\d+)_(-?\d+)/, async (ctx) => {
  const scenarioId = ctx.match[1];
  const chatId = ctx.match[2];
  const scenario = availableScenarios.find(s => s.id == scenarioId);
  const chat = availableChats.find(c => c.id == chatId);

  try {
    await addScenarioMapping(scenarioId, scenario.name, chatId, chat.title);
    ctx.editMessageText(`‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π "${scenario.name}" –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≥—Ä—É–ø–ø–µ "${chat.title}".`);
  } catch (error) {
    console.error('Add scenario error:', error);
    ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–∏–≤—è–∑–∫–∏.');
  }
});

bot.command('list', async (ctx) => {
  if (!(await isUserAdmin(ctx.from.id))) {
    return ctx.reply('‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.');
  }

  try {
    const mappings = await listScenarioMappings();
    if (mappings.length === 0) {
      return ctx.reply('‚ÑπÔ∏è –ü—Ä–∏–≤—è–∑–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.');
    }

    const message = mappings.map(m =>
      `üìã ${m.skorozvon_scenario_name} ‚Üí –ì—Ä—É–ø–ø–∞: ${m.telegram_chat_title}`
    ).join('\n\n');

    ctx.reply(`–¢–µ–∫—É—â–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏:\n\n${message}`);
  } catch (error) {
    console.error('List scenarios error:', error);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞.');
  }
});

bot.command('refresh', async (ctx) => {
  if (!(await isUserAdmin(ctx.from.id))) {
    return ctx.reply('‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.');
  }

  await ctx.reply('üîÑ –û–±–Ω–æ–≤–ª—è—é —Å—Ü–µ–Ω–∞—Ä–∏–∏...');
  await refreshScenariosCache();
  ctx.reply(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${availableScenarios.length} —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤.`);
});

bot.command('chats', async (ctx) => {
  if (!(await isUserAdmin(ctx.from.id))) {
    return ctx.reply('‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.');
  }

  if (availableChats.length === 0) {
    return ctx.reply('‚ÑπÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤.');
  }

  const message = availableChats.map(chat =>
    `üí¨ ${chat.title} (ID: ${chat.id})`
  ).join('\n\n');

  ctx.reply(`–î–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã:\n\n${message}`);
});

bot.command('admins', async (ctx) => {
  if (ctx.from.id.toString() !== MAIN_ADMIN_ID) {
    const admins = await listAdmins();
    if (admins.length === 0) {
      return ctx.reply('‚ÑπÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã.');
    }
    
    const message = admins.map(admin =>
      `üë§ @${admin.username || 'unknown'} (ID: ${admin.telegram_user_id})`
    ).join('\n');

    return ctx.reply(`–¢–µ–∫—É—â–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:\n\n${message}`);
  }

  const admins = await listAdmins();
  ctx.reply(
    '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏:',
    Markup.inlineKeyboard([
      [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞', 'add_admin')],
      [Markup.button.callback('‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞', 'remove_admin')],
      [Markup.button.callback('üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤', 'list_admins')]
    ])
  );
});

bot.action('add_admin', async (ctx) => {
  await ctx.editMessageText(
    '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:\n\n' +
    '1. üìß –ü–æ username (@username)\n' +
    '2. ‚û°Ô∏è –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n' +
    '3. üî¢ –ü–æ ID',
    Markup.inlineKeyboard([
      [Markup.button.callback('üìß –ü–æ username', 'add_by_username')],
      [Markup.button.callback('‚û°Ô∏è –ü–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', 'add_by_forward')],
      [Markup.button.callback('üî¢ –ü–æ ID', 'add_by_id')]
    ])
  );
});

bot.action('add_by_username', async (ctx) => {
  await ctx.editMessageText('–û—Ç–ø—Ä–∞–≤—å—Ç–µ username (@username –∏–ª–∏ username):');
  ctx.session = { waitingForAdmin: 'username' };
});

bot.action('add_by_forward', async (ctx) => {
  await ctx.editMessageText('–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
  ctx.session = { waitingForAdmin: 'forward' };
});

bot.action('add_by_id', async (ctx) => {
  await ctx.editMessageText('–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
  ctx.session = { waitingForAdmin: 'id' };
});

bot.action('remove_admin', async (ctx) => {
  const admins = await listAdmins();
  await ctx.editMessageText(
    '–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:',
    Markup.inlineKeyboard(
      admins.map(admin => [
        Markup.button.callback(
          `@${admin.username || 'unknown'} (${admin.telegram_user_id})`,
          `remove_admin_${admin.telegram_user_id}`
        )
      ]),
      { columns: 1 }
    )
  );
});

bot.action('list_admins', async (ctx) => {
  const admins = await listAdmins();
  const message = admins.map(admin =>
    `üë§ @${admin.username || 'unknown'} (ID: ${admin.telegram_user_id})`
  ).join('\n');

  ctx.editMessageText(`–¢–µ–∫—É—â–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:\n\n${message}`);
});

bot.action(/remove_admin_(\d+)/, async (ctx) => {
  const userId = ctx.match[1];
  try {
    await removeAdmin(userId);
    ctx.editMessageText(`‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID ${userId} —É–¥–∞–ª–µ–Ω.`);
  } catch (error) {
    console.error('Remove admin error:', error);
    ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
  }
});

bot.command('add_admin', async (ctx) => {
  if (ctx.from.id.toString() !== MAIN_ADMIN_ID) {
    return ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.');
  }

  const args = ctx.message.text.split(' ').slice(1);
  if (args.length === 0) {
    return ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_admin <user_id>');
  }

  const userId = args[0];
  if (!/^\d+$/.test(userId)) {
    return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.');
  }

  try {
    await addAdmin(parseInt(userId), 'unknown');
    ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.`);
  } catch (error) {
    console.error('Add admin error:', error);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
  }
});

bot.command('myid', (ctx) => {
  const user = ctx.from;
  ctx.reply(
    `üë§ –í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n` +
    `ID: <code>${user.id}</code>\n` +
    `Username: @${user.username || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n` +
    `–ò–º—è: ${user.first_name}${user.last_name ? ' ' + user.last_name : ''}\n\n` +
    `–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É:\n` +
    `<code>/add_admin ${user.id}</code> –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ`,
    { parse_mode: 'HTML' }
  );
});

bot.on('message', async (ctx) => {
  await updateAvailableChats(ctx);
  
  if (ctx.session && ctx.session.waitingForAdmin === 'forward' && ctx.message.forward_from) {
    const user = ctx.message.forward_from;
    try {
      await addAdmin(user.id, user.username || 'unknown');
      delete ctx.session.waitingForAdmin;
      ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${user.username || user.id} (ID: ${user.id}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.`);
    } catch (error) {
      console.error('Add admin error:', error);
      ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
    }
    return;
  }
});

bot.on('text', async (ctx) => {
  if (ctx.session && ctx.session.waitingForAdmin) {
    const input = ctx.message.text.trim();
    
    try {
      let userId, username;
      
      if (ctx.session.waitingForAdmin === 'username') {
        const cleanUsername = input.replace('@', '').trim();
        if (!cleanUsername) {
          return ctx.reply('‚ùå Username –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.');
        }
        userId = ctx.from.id;
        username = cleanUsername;
      } else if (ctx.session.waitingForAdmin === 'id') {
        if (!/^\d+$/.test(input)) {
          return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.');
        }
        userId = parseInt(input);
        username = 'unknown';
      }
      
      if (userId) {
        await addAdmin(userId, username);
        delete ctx.session.waitingForAdmin;
        ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.session.waitingForAdmin === 'username' ? '@' + username : '—Å ID ' + userId} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.`);
      }
    } catch (error) {
      console.error('Add admin error:', error);
      ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
    }
  }
});

// Bot launch
bot.launch().then(() => {
  console.log('Telegram Bot is running...');
  if (MAIN_ADMIN_ID) {
    addAdmin(MAIN_ADMIN_ID, 'main_admin');
  }
  refreshScenariosCache();
}).catch(err => {
  console.error('Error starting bot:', err);
});

// Webhook handler
app.post("/webhook", async (req, res) => {
  const callId = req.body?.call?.id;
  const resultName = req.body?.call_result?.result_name;
  const scenarioId = req.body?.call?.scenario_id;

  if (!scenarioId) {
    return res.sendStatus(200);
  }

  if (processedCallIds.has(callId)) {
    return res.sendStatus(200);
  }
  processedCallIds.add(callId);
  setTimeout(() => processedCallIds.delete(callId), 24 * 60 * 60 * 1000);

  const isSuccessfulCall = resultName && SUCCESSFUL_RESULT_NAMES.some(name =>
    resultName.toLowerCase().includes(name.toLowerCase())
  );

  if (isSuccessfulCall && callId) {
    let targetChatId;
    try {
      targetChatId = await getChatIdForScenario(scenarioId);
    } catch (error) {
      console.error("Error getting target chat for scenario:", scenarioId, error);
      return res.sendStatus(500);
    }

    if (!targetChatId) {
      return res.sendStatus(200);
    }

    const managerName = req.body?.call?.user?.name || "–ù–µ —É–∫–∞–∑–∞–Ω";
    const phone = req.body?.call?.phone || "–ù–µ —É–∫–∞–∑–∞–Ω";
    const comment = req.body?.call_result?.comment || "–Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è";
    const callStartedAt = req.body?.call?.started_at;
    const formattedDate = formatDate(callStartedAt);

    const message = `
‚úÖ –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ô –ö–õ–ò–ï–ù–¢ 

üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä: ${managerName}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${resultName}
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}
üîÑ –°—Ü–µ–Ω–∞—Ä–∏–π ID: ${scenarioId}

–î–∞—Ç–∞: ${formattedDate}
ID –∑–≤–æ–Ω–∫–∞: ${callId}`;

    await new Promise((resolve) => setTimeout(resolve, 120000));

    const audioSent = await sendAudioToTelegram(callId, message, targetChatId);

    logCall({
      callId, scenarioId, resultName, managerName, phone, comment, startedAt: callStartedAt
    }, targetChatId);

    if (!audioSent) {
      await axios.post(
        `https://api.telegram.org/bot${TG_BOT_TOKEN}/sendMessage`,
        {
          chat_id: targetChatId,
          text: message + "\n\n‚ùå –ó–∞–ø–∏—Å—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
          parse_mode: "HTML",
        }
      );
    }
  }

  res.sendStatus(200);
});

app.get("/", (req, res) => {
  res.send("CallSuccess AI Processor is running with Scenario Routing");
});

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
  console.log(`Webhook: http://localhost:${PORT}/webhook`);
});

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));