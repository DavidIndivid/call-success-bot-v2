require("dotenv").config();
const express = require("express");
const axios = require("axios");
const fs = require("fs");
const path = require("path");

const app = express();
const PORT = process.env.PORT || 3000;

const SUCCESSFUL_RESULT_NAMES = process.env.SUCCESSFUL_RESULT_NAMES
  ? process.env.SUCCESSFUL_RESULT_NAMES.split(",")
  : ["–£—Å–ø–µ—Ö", "–ì–æ—Ä—è—á–∏–π", "–ì–æ—Ä—è—á–∞—è", "Hot"];

const TG_BOT_TOKEN = process.env.TG_BOT_TOKEN;
const TG_CHAT_ID = process.env.TG_CHAT_ID;
const SKOROZVON_ACCESS_TOKEN = process.env.SKOROZVON_ACCESS_TOKEN;

app.use(express.json());

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
const tempDir = path.join(__dirname, 'temp');
if (!fs.existsSync(tempDir)) {
  fs.mkdirSync(tempDir);
}

app.get("/", (req, res) => {
  res.send("CallSuccess AI Processor is alive!");
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
async function downloadRecording(callId) {
  try {
    const recordingUrl = `https://api.skorozvon.ru/api/v2/calls/${callId}.mp3?access_token=${SKOROZVON_ACCESS_TOKEN}`;
    console.log("–ü—ã—Ç–∞—é—Å—å —Å–∫–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –ø–æ URL:", recordingUrl);
    
    const response = await axios({
      method: 'GET',
      url: recordingUrl,
      responseType: 'stream',
      timeout: 30000 // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
    });

    const filePath = path.join(tempDir, `${callId}.mp3`);
    const writer = fs.createWriteStream(filePath);
    
    response.data.pipe(writer);
    
    return new Promise((resolve, reject) => {
      writer.on('finish', () => {
        console.log("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–∞:", filePath);
        resolve(filePath);
      });
      writer.on('error', reject);
    });
    
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:", error.message);
    if (error.response) {
      console.error("–°—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏:", error.response.status);
      console.error("–î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:", error.response.data);
    }
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –≤ Telegram
async function sendAudioToTelegram(filePath, callId, caption) {
  try {
    const formData = new FormData();
    const fileStream = fs.createReadStream(filePath);
    
    formData.append('chat_id', TG_CHAT_ID);
    formData.append('audio', fileStream);
    formData.append('caption', caption);
    formData.append('parse_mode', 'HTML');

    const response = await axios.post(
      `https://api.telegram.org/bot${TG_BOT_TOKEN}/sendAudio`,
      formData,
      {
        headers: {
          ...formData.getHeaders(),
          'Content-Type': 'multipart/form-data'
        },
        maxContentLength: Infinity,
        maxBodyLength: Infinity
      }
    );

    console.log("–ê—É–¥–∏–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram");
    return true;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ:", error.message);
    if (error.response) {
      console.error("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ Telegram:", error.response.data);
    }
    return false;
  }
}

app.post("/webhook", async (req, res) => {
  console.log("=== –í–ï–ë–•–£–ö –ü–û–õ–£–ß–ï–ù ===");
  console.log("–í—Ä–µ–º—è:", new Date().toISOString());

  try {
    const resultName = req.body?.call_result?.result_name;
    const callDuration = req.body?.call?.duration || 0;
    const callId = req.body?.call?.id;

    console.log("--- –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ ---");
    console.log("–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:", resultName);
    console.log("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–≤–æ–Ω–∫–∞:", callDuration, "—Å–µ–∫");
    console.log("ID –∑–≤–æ–Ω–∫–∞:", callId);

    const isSuccessfulCall =
      resultName &&
      SUCCESSFUL_RESULT_NAMES.some((name) =>
        resultName.toLowerCase().includes(name.toLowerCase())
      );

    if (isSuccessfulCall) {
      console.log("–û–ë–ù–ê–†–£–ñ–ï–ù –£–°–ü–ï–®–ù–´–ô –ó–í–û–ù–û–ö!");

      const managerName = req.body?.call?.user?.name || "–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω";
      const clientName = req.body?.lead?.name || req.body?.contact?.name || "–ö–ª–∏–µ–Ω—Ç –Ω–µ —É–∫–∞–∑–∞–Ω";
      const organizationName = req.body?.lead?.name || "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞";
      const phone = req.body?.call?.phone || "–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω";
      const comment = req.body?.call_result?.comment || "–Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è";

      // –ñ–¥–µ–º 2 –º–∏–Ω—É—Ç—ã –¥–ª—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
      console.log("–ñ–¥—É 2 –º–∏–Ω—É—Ç—ã, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å—å —É—Å–ø–µ–ª–∞ –ø–æ—è–≤–∏—Ç—å—Å—è...");
      await new Promise((resolve) => setTimeout(resolve, 120000));

      let recordingLink = null;
      let audioSent = false;

      // –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ
      if (callId) {
        const audioFilePath = await downloadRecording(callId);
        
        if (audioFilePath) {
          const caption = `‚úÖ –£–°–ü–ï–®–ù–´–ô –ó–í–û–ù–û–ö

üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä: ${managerName}
üë• –ö–ª–∏–µ–Ω—Ç: ${clientName} 
üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: ${organizationName}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${resultName}
‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${callDuration} —Å–µ–∫
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}

ID –∑–≤–æ–Ω–∫–∞: ${callId}`;

          audioSent = await sendAudioToTelegram(audioFilePath, callId, caption);
          
          // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
          try {
            fs.unlinkSync(audioFilePath);
            console.log("–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω");
          } catch (err) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:", err.message);
          }
        }
      }

      // –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const message = `‚úÖ –£–°–ü–ï–®–ù–´–ô –ó–í–û–ù–û–ö

üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä: ${managerName}
üë• –ö–ª–∏–µ–Ω—Ç: ${clientName}
üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: ${organizationName}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${resultName}
‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${callDuration} —Å–µ–∫
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}
${audioSent ? 'üéß –ê—É–¥–∏–æ–∑–∞–ø–∏—Å—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤—ã—à–µ' : 'üîó –ó–∞–ø–∏—Å—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}

ID –∑–≤–æ–Ω–∫–∞: ${callId}`;

      const telegramApiUrl = `https://api.telegram.org/bot${TG_BOT_TOKEN}/sendMessage`;

      console.log("üì® –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram...");
      await axios.post(telegramApiUrl, {
        chat_id: TG_CHAT_ID,
        text: message,
        parse_mode: "HTML"
      });

      console.log("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram");
    } else {
      console.log("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º - –Ω–µ —É—Å–ø–µ—à–Ω—ã–π –∑–≤–æ–Ω–æ–∫");
    }

    res.sendStatus(200);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞:", error.message);
    if (error.response) {
      console.error("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:", error.response.data);
    }
    res.sendStatus(200);
  }
});

app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`–í–µ–±—Ö—É–∫ –¥–ª—è Skorozvon: http://localhost:${PORT}/webhook`);
  console.log(`–û–∂–∏–¥–∞—é —É—Å–ø–µ—à–Ω—ã–µ –∑–≤–æ–Ω–∫–∏: ${SUCCESSFUL_RESULT_NAMES.join(", ")}`);
});